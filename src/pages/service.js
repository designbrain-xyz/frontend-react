import Head from "next/head";
import { Inter } from "@next/font/google";
import Dropzone from "@/components/Dropzone";
import Range from "@/components/Range";
import Select from "@/components/Select";
import MyCarousel from "@/components/MyCarousel";
import { Spinner } from "flowbite-react";
import Button from "@/components/Button";
import MyNavbar from "@/components/MyNavbar";
import MyFooter from "@/components/MyFooter";
import { useState } from "react";
import SelectWithImages from "@/components/SelectWithImages";

const ROOM_OPTIONS = [
    { id: 0, name: "Kitchen", image: "https://picsum.photos/500" },
    { id: 1, name: "Living Room", image: "https://picsum.photos/500" },
    { id: 2, name: "Bedroom", image: "https://picsum.photos/500" },
    { id: 3, name: "Bathroom", image: "https://picsum.photos/500" },
];

const STYLE_OPTIONS = [
    { id: 0, name: "Classic", image: "https://picsum.photos/500" },
    { id: 1, name: "Modern", image: "https://picsum.photos/500" },
    { id: 2, name: "Minimalist", image: "https://picsum.photos/500" },
    { id: 3, name: "Art deco", image: "https://picsum.photos/500" },
];

export default function Home() {
    const [loading, setLoading] = useState(false);
    const [numImages, setNumImages] = useState(1);
    const [room, setRoom] = useState("Select Room");
    const [style, setStyle] = useState("Select Style");
    const [image, setImage] = useState();
    const [error, setError] = useState();

    function delay(seconds) {
        return new Promise((resolve) => {
            setTimeout(resolve, seconds * 1000);
        });
    }

    const validateForm = () => {
        if (room == "Select Room") {
            setError("Select Room Type");
            return false;
        }
        if (style == "Select Style") {
            setError("Select Generation Style");
            return false;
        }
        return true;
    };

    const getImages = async (event) => {
        console.log(event.target);
        try {
            setLoading(true);
            const res = await delay(10);
            setLoading(false);
        } catch (error) {
            setLoading(false);
            setError("Internal Server Error");
            console.error(error);
        }
    };

    return (
        <div className="flex h-screen flex-col">
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <MyNavbar />
            <div className="bg-gray-100 w-full grid gap-4 md:gap-8 md:grid-cols-2 md:grid-rows-2 mt-16 p-4 md:p-8 h-full">
                <div className="w-full md:row-start-1 md:col-start-1 h-64 md:h-full">
                    <Dropzone image={image} setImage={setImage} />
                </div>
                <div className="md:row-start-2 md:col-start-1 md:col-end-2">
                    <div className="grid grid-cols-2 grid-rows-1 gap-4 md:hidden text-sm md:text-base">
                        <Select
                            value={room}
                            setValue={setRoom}
                            options={ROOM_OPTIONS}
                        />
                        <Select
                            value={style}
                            setValue={setStyle}
                            options={STYLE_OPTIONS}
                        />
                    </div>
                    <div className="hidden md:grid grid-cols-2 grid-rows-1 gap-8 text-sm md:text-base">
                        <SelectWithImages
                            options={ROOM_OPTIONS}
                            value={room}
                            setValue={setRoom}
                        />
                        <SelectWithImages
                            options={STYLE_OPTIONS}
                            value={style}
                            setValue={setStyle}
                        />
                    </div>
                    <div className="grid grid-rows-2 gap-4 md:gap-8 mt-4 md:mt-8 text-sm md:text-base">
                        <Range value={numImages} setValue={setNumImages}>
                            Number of images
                        </Range>
                        <Button onClick={getImages}>Generate</Button>
                    </div>
                </div>
                <div className="w-full md:row-start-1 md:col-start-2 h-64 md:h-full">
                    {loading ? (
                        <div className="flex h-full justify-center items-center">
                            <Spinner size="xl" />
                        </div>
                    ) : (
                        <div className="h-full relative">
                            <MyCarousel
                                images={[
                                    "https://picsum.photos/500",
                                    "https://picsum.photos/500/300",
                                    "https://picsum.photos/200",
                                    "https://picsum.photos/200/500",
                                    "https://picsum.photos/300/200",
                                ]}
                            />
                            <div className="absolute right-0 bottom-0 m-4 inline-flex items-center justify-center w-8 h-8 rounded-lg sm:w-10 sm:h-10 bg-white/30 dark:bg-gray-800/30">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth={1.5}
                                    stroke="currentColor"
                                    className="w-6 h-6"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3"
                                    />
                                </svg>
                            </div>

                            <div className="absolute left-0 bottom-0 m-4 inline-flex items-center justify-center w-8 h-8 rounded-lg sm:w-10 sm:h-10 bg-white/30 dark:bg-gray-800/30">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth={1.5}
                                    stroke="currentColor"
                                    className="w-6 h-6"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        d="M15 11.25l-3-3m0 0l-3 3m3-3v7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                    />
                                </svg>
                            </div>
                            <div className="absolute right-0 top-0 m-4 inline-flex items-center justify-center w-8 h-8 rounded-lg sm:w-10 sm:h-10 bg-white/30 dark:bg-gray-800/30">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth={1.5}
                                    stroke="currentColor"
                                    className="w-6 h-6"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"
                                    />
                                </svg>
                            </div>
                        </div>
                    )}
                </div>
            </div>

            <MyFooter />
        </div>
    );
}
